#!/usr/bin/env bash

# Reset color for command output (this one is invoked every time before a command is executed):
trap 'echo -ne "\e[0m"' DEBUG

Color_Off="\033[0m"

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] >/dev/null 2>&1; then
        MAGENTA=$(tput setaf 9)
        ORANGE=$(tput setaf 172)
        PURPLE=$(tput setaf 141)
        WHITE=$(tput setaf 256)
    else
        MAGENTA=$(tput setaf 5)
        ORANGE=$(tput setaf 4)
        PURPLE=$(tput setaf 1)
        WHITE=$(tput setaf 7)
    fi
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    RESET="\033[m"
fi

function git_info {
    # check if we're in a git repo
    git rev-parse --is-inside-work-tree &> /dev/null || return

    # quickest check for what branch we're on
    #branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

    # check if it's dirty (via github.com/sindresorhus/pure)
    dirty=$(git diff --quiet --ignore-submodules HEAD &> /dev/null; [ $? -eq 1 ] && echo "*")

    echo "${WHITE}${PURPLE} ⊶ $(__git_ps1 '%s') ${dirty}"
}

function prompt_git {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
                git update-index --really-refresh -q &> /dev/null
            fi

            # Check for uncommitted changes in the index.
            if ! git diff --quiet --ignore-submodules --cached; then
                s+='+'
            fi

            # Check for unstaged changes.
            if ! git diff-files --quiet --ignore-submodules --; then
                s+='!'
            fi

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?'
            fi

            # Check for stashed files.
            if git rev-parse --verify refs/stash &>/dev/null; then
                s+='$'
            fi
        fi

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || echo '(unknown)')"

        [ -n "${s}" ] && s=" [${s}]"

        echo -e "${1}${branchName}${s}"
    else
        return
    fi
}

function __prompt_command {
    EXIT="$?"

    reset_style='\[\033[00m\]'
    if [ -z "$VIM" ]
    then status_style=$reset_style'\[\033[0;90m\]' # gray color; use 0;37m for lighter color
    else status_style=$reset_style'\[\033[0;90;107m\]'
    fi
    prompt_style=$reset_style
    command_style=$reset_style'\[\033[1;29m\]' # bold black

    # Fill with minuses (this is recalculated every time the prompt is shown in function prompt_command):
    fill="--- "

    # Put the penultimate and current directory in the iterm tab
    PS1="\n$status_style"'$fill \t\n'"$prompt_style$command_style\[\e]2;$PWD\[\a\]\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]"

    # create a $fill of all screen width minus the time string and a space:
    let fillsize=${COLUMNS}-9
    fill=""
    while [ "$fillsize" -gt "0" ]
    do
        fill="-${fill}" # fill with underscores to work on
        let fillsize=${fillsize}-1
    done

    # if logged in via ssh shows the ip of the client
    [ -n "$SSH_CLIENT" ] && PS1+="\[$ORANGE\](${$SSH_CLIENT%% *})\[$Color_Off\]"

    PS1+="\[$BPurple\]\w\[$Color_Off\]"

    if cmd_exists git-radar
    then PS1+="$WHITE$PURPLE\$(git-radar --bash)\[$WHITE\]\[$RESET\]\n"
    else PS1+="$(git_info)\[$WHITE\]\[$RESET\]\n"
    fi

    if [ $EXIT -eq 0 ]
    then PS1+="\[$WHITE\]"
    else PS1+="\[$MAGENTA\]"
    fi

    PS1+="❯\[$Color_Off\] "
}

PROMPT_COMMAND=__prompt_command
