# Reset color for command output (this one is invoked every time before a command is executed):
trap 'echo -ne "\e[0m"' DEBUG

Color_Off="\033[0m"


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        MAGENTA=$(tput setaf 9)
        ORANGE=$(tput setaf 172)
        GREEN=$(tput setaf 190)
        PURPLE=$(tput setaf 141)
        WHITE=$(tput setaf 256)
    else
        MAGENTA=$(tput setaf 5)
        ORANGE=$(tput setaf 4)
        GREEN=$(tput setaf 2)
        PURPLE=$(tput setaf 1)
        WHITE=$(tput setaf 7)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi


function git_info()
{
    # check if we're in a git repo
    git rev-parse --is-inside-work-tree &> /dev/null || return

    # quickest check for what branch we're on
    branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

    # check if it's dirty (via github.com/sindresorhus/pure)
    dirty=$(git diff --quiet --ignore-submodules HEAD &> /dev/null; [ $? -eq 1 ] && echo -e "*")

    echo $WHITE" on "$PURPLE$branch$dirty
}

# set up command prompt
function __prompt_command()
{
    EXIT="$?"

    # Fill with minuses
    # (this is recalculated every time the prompt is shown in function prompt_command):
    fill="--- "

    reset_style='\[\033[00m\]'
    if [ -z "$VIM" ]
    then status_style=$reset_style'\[\033[0;90m\]' # gray color; use 0;37m for lighter color
    else status_style=$reset_style'\[\033[0;90;107m\]'
    fi
    prompt_style=$reset_style
    command_style=$reset_style'\[\033[1;29m\]' # bold black

    # Put the penultimate and current directory in the iterm tab
    # \[\e]1;\]$(basename $(dirname $PWD))/\W\[\a\]
    PS1="$status_style"'$fill \t\n'"$prompt_style$command_style\[\e]2;$PWD\[\a\]\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]"

    # create a $fill of all screen width minus the time string and a space:
    let fillsize=${COLUMNS}-9
    fill=""
    while [ "$fillsize" -gt "0" ]
    do
        fill="-${fill}" # fill with underscores to work on
        let fillsize=${fillsize}-1
    done


    # if logged in via ssh shows the ip of the client
    if [ -n "$SSH_CLIENT" ]; then PS1+="\[$ORANGE\]("${$SSH_CLIENT%% *}")\[$Color_Off\]"; fi

    PS1+="\[$BPurple\]\w\[$Color_Off\]"

    PS1+="\$(git_info)\[$WHITE\]\[$RESET\]\n"

    if [ $EXIT -eq 0 ]
    then PS1+="\[$WHITE\]❯\[$Color_Off\] "
    else PS1+="\[$MAGENTA\]❯\[$Color_Off\] "
    fi
}

PROMPT_COMMAND=__prompt_command
