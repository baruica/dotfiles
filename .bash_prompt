# Reset color for command output (this one is invoked every time before a command is executed):
trap 'echo -ne "\e[0m"' DEBUG

Color_Off="\033[0m"

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        MAGENTA=$(tput setaf 9)
        ORANGE=$(tput setaf 172)
        GREEN=$(tput setaf 190)
        PURPLE=$(tput setaf 141)
        WHITE=$(tput setaf 256)
    else
        MAGENTA=$(tput setaf 5)
        ORANGE=$(tput setaf 4)
        GREEN=$(tput setaf 2)
        PURPLE=$(tput setaf 1)
        WHITE=$(tput setaf 7)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi


function git_info()
{
    # check if we're in a git repo
    git rev-parse --is-inside-work-tree &> /dev/null || return

    # quickest check for what branch we're on
    branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

    # check if it's dirty (via github.com/sindresorhus/pure)
    dirty=$(git diff --quiet --ignore-submodules HEAD &> /dev/null; [ $? -eq 1 ] && echo -e "*")

    echo $WHITE" on "$PURPLE$branch$dirty
}

# set up command prompt
function __prompt_command()
{
    EXIT="$?"

    # Fill with minuses
    # (this is recalculated every time the prompt is shown in function prompt_command):
    fill="--- "

    reset_style='\[\033[00m\]'
    if [ -z "$VIM" ];
    then status_style=$reset_style'\[\033[0;90m\]' # gray color; use 0;37m for lighter color
    else status_style=$reset_style'\[\033[0;90;107m\]'
    fi
    prompt_style=$reset_style
    command_style=$reset_style'\[\033[1;29m\]' # bold black

    # iTerm Tab and Title Customization and prompt customization
    # http://sage.ucsc.edu/xtal/iterm_tab_customization.html

    # Put the string " [bash] hostname::/full/directory/path"
    # in the title bar using the command sequence
    # \[\e]2;[bash] \h::\]$PWD\[\a\]

    # Put the penultimate and current directory
    # in the iterm tab
    # \[\e]1;\]$(basename $(dirname $PWD))/\W\[\a\]
    PS1="$status_style"'$fill \t\n'"$prompt_style$command_style\[\e]2;$PWD\[\a\]\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]"

    # create a $fill of all screen width minus the time string and a space:
    let fillsize=${COLUMNS}-9
    fill=""
    while [ "$fillsize" -gt "0" ]
    do
        fill="-${fill}" # fill with underscores to work on
        let fillsize=${fillsize}-1
    done


    # if logged in via ssh shows the ip of the client
    if [ -n "$SSH_CLIENT" ]; then PS1+="\[$txtylw\]("${$SSH_CLIENT%% *}")\[$Color_Off\]"; fi

    PS1+="\[$BPurple\]\w\[$Color_Off\]"

    PS1+="\$(git_info)\[$WHITE\]\[$RESET\]\n"

    if [ $EXIT -eq 0 ]; then PS1+="\[$txtgrn\][\!] >\[$Color_Off\] "; else PS1+="\[$txtred\][\!] >\[$Color_Off\] "; fi
}
PROMPT_COMMAND=__prompt_command
