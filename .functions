#!/usr/bin/env bash

function aptclean {
    sudo apt autoremove -y --purge
    sudo apt autoclean -y
    sudo apt clean -y
}

function explain {
    if [[ $# -eq 0 ]]; then
        while read  -p "Command: " cmd; do
            curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
        done
        echo "Bye!"
    elif [[ $# -eq 1 ]]; then
        curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
    else
        echo "Usage"
        echo "explain                  interactive mode."
        echo "explain 'cmd -o | ...'   one quoted command to explain it."
    fi
}
# Update 26-03-2015. If using this command gives no output, see if running a simple fetch causes this error:
# $ curl https://www.mankier.com
# curl: (35) Cannot communicate securely with peer: no common encryption algorithm(s).
# If so, try specifying a cipher in the curl commands: curl --ciphers ecdhe_ecdsa_aes_128_sha

function ld {
    app=${1:-app}
    dump_prefix=${2:-app}

    db="dev_${app}"

    zcat $(ls -1 ~/temp/dumps/${dump_prefix}-* | tail -1) \
        | pv --progress --size $(gzip -l $(ls -1 ~/temp/dumps/${dump_prefix}-* | tail -1) | sed -n 2p | awk '{print $2}') --name "${db}" \
        | mysql -uroot -pdevpass1 "${db}"
}

function loopdir {
    command=$*
    for d in */ ; do (cd "$d" || exit; $command); done
}

# loop over directory based on a glob pattern loopdirp 'a*' rm deploy.yml
function loopdirp {
    pattern=$1
    shift 1
    command=$*
    for d in $pattern/ ; do (cd "$d" || exit; $command); done
}

function md {
    mkdir -p "$@" && cd "$_" || exit
}

# Determine size of a file or total size of a directory
function fs {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n $@ ]]; then
        du $arg -- "$@"
    else
        du $arg -- .[^.]* *
    fi
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null
if [[ $? -eq 0 ]]; then
    diff() {
        git diff --no-index --color-words "$@"
    }
fi

function cmd_exists {
    hash "$1" &>/dev/null
}

function exec_if_cmd_exists {
    cmd_exists "$1" && "$@"
}

function sudo_exec_if_cmd_exists {
    cmd_exists "$1" && sudo "$@"
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring the `.git` directory, listing directories first.
# The output gets piped into `less` with options to preserve color and line numbers, unless the output is small enough for one screen.
function tre {
    tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# Call from a local repo to open the repository on github/bitbucket in browser
function repo {
    local giturl
    giturl=$(git config --get remote.origin.url | sed 's/git@/\/\//g' | sed 's/.git$//' | sed 's/https://g' | sed 's/:/\//g')
    if [[ ${giturl} == "" ]]; then
        echo "Not a git repository or no remote.origin.url is set."
    else
        local gitbranch
        gitbranch=$(git rev-parse --abbrev-ref HEAD)
        local giturl="http:${giturl}"

        if [[ ${gitbranch} != "master" ]]; then
            if echo "${giturl}" | grep -i "bitbucket" > /dev/null ; then
                local giturl="${giturl}/branch/${gitbranch}"
            else
                local giturl="${giturl}/tree/${gitbranch}"
            fi
        fi

        echo "$giturl"
        open "$giturl"
    fi
}

function jump-to-git-root {
    local _root_dir="$(git rev-parse --show-toplevel 2>/dev/null)"
    if [[ $? -gt 0 ]]; then
        >&2 echo 'Not a Git repo!'
        exit 1
    fi
    local _pwd=$(pwd)
    if [[ "$_pwd" = "$_root_dir" ]]; then
        # Handle submodules:
        # If parent dir is also managed under Git then we are in a submodule.
        # If so, cd to nearest Git parent project.
        _root_dir="$(git -C $(dirname $_pwd) rev-parse --show-toplevel 2>/dev/null)"
        if [[ $? -gt 0 ]]; then
            echo "Already at Git repo root."
            return 0
        fi
    fi
    # Make `cd -` work.
    OLDPWD=$_pwd
    echo "Git repo root: $_root_dir"
    cd "$_root_dir" || exit 1
}
